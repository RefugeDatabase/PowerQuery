let func =
    (InputTable as table) as table =>
    let
        #"Renamed to Addresses" = Table.RenameColumns(InputTable,{{"LoqatePrepare", "Addresses"}}),
        InitialJson = Json.FromValue(#"Renamed to Addresses"),
        InitialJsonText = Text.FromBinary(InitialJson),
        FinalJsonText = Text.Insert(Text.Middle(InitialJsonText,1,Text.Length(InitialJsonText)-2),Text.Length(InitialJsonText)-3,","&
            Character.FromNumber(34)&"Options"&Character.FromNumber(34)&": {"&Character.FromNumber(34)&"Process"&Character.FromNumber(34)&": "&Character.FromNumber(34)&"Verify"&Character.FromNumber(34)&","&Character.FromNumber(34)&"Certify"&Character.FromNumber(34)&":false,"&Character.FromNumber(34)&"ServerOptions"&Character.FromNumber(34)&": {"&Character.FromNumber(34)&"OutputAddressFormat"&Character.FromNumber(34)&": "&Character.FromNumber(34)&"Yes"&Character.FromNumber(34)&","&Character.FromNumber(34)&"AddressLineSeparator"&Character.FromNumber(34)&":"&Character.FromNumber(34)&"/n"&Character.FromNumber(34)&"}}"),
        FinalJson = Json.Document(Web.Contents("https://api.addressy.com/Cleansing/International/Batch/v1.00/json4.ws", [Headers=[#"Content-Type"="application/json"], Content=Text.ToBinary(FinalJsonText)])),
        OutputList = FinalJson,
        #"Converted to Table" = Table.FromList(OutputList, Splitter.SplitByNothing(), null, null, ExtraValues.Error),
        #"Expanded Column1" = Table.ExpandRecordColumn(#"Converted to Table", "Column1", {"Input", "Matches"}, {"Column1.Input", "Column1.Matches"}),
        #"Expanded Column1.Matches" = Table.ExpandListColumn(#"Expanded Column1", "Column1.Matches"),
        #"Expanded Column1.Matches1" = Table.ExpandRecordColumn(#"Expanded Column1.Matches", "Column1.Matches", {"AQI", "AVC", "Address", "Address1", "Address2", "Address3", "Administrative Area", "AdministrativeArea", "CountryName", "DeliveryAddress", "DeliveryAddress1", "HyphenClass", "ISO3166-2", "Country", "ISO3166-3", "ISO3166-N", "Locality", "MatchRuleLabel", "PostalCode", "PostalCodePrimary", "Premise", "PremiseNumber", "Thoroughfare", "ThoroughfareName", "ThoroughfareTrailingType", "ThoroughfareType", "Address4", "DeliveryAddress2", "DependentLocality", "Unmatched", "Building", "SubBuilding", "SubBuildingNumber", "Address5", "DeliveryAddress3"}, {"AQI", "AVC", "Address", "Address1", "Address2", "Address3", "Administrative Area", "AdministrativeArea", "CountryName", "DeliveryAddress", "DeliveryAddress1", "HyphenClass", "ISO3166-2", "Country", "ISO3166-3", "ISO3166-N", "Locality", "MatchRuleLabel", "PostalCode", "PostalCodePrimary", "Premise", "PremiseNumber", "Thoroughfare", "ThoroughfareName", "ThoroughfareTrailingType", "ThoroughfareType", "Address4", "DeliveryAddress2", "DependentLocality", "Unmatched", "Building", "SubBuilding", "SubBuildingNumber", "Address5", "DeliveryAddress3"}),
        #"Expanded Column1.Input" = Table.ExpandRecordColumn(#"Expanded Column1.Matches1", "Column1.Input", {"Address", "Address1", "Address2", "Address3", "Address4", "Address5", "Address6", "Address7", "Address8", "Country", "SuperAdministrativeArea", "Administrative Area", "SubAdministrativeArea", "Locality", "DependentLocality", "DoubleDependentLocality", "Thoroughfare", "DependentThoroughfare", "Building", "Premise", "SubBuilding", "PostalCode", "Organization", "PostBox"}, {"Column1.Input.Address", "Column1.Input.Address1", "Column1.Input.Address2", "Column1.Input.Address3", "Column1.Input.Address4", "Column1.Input.Address5", "Column1.Input.Address6", "Column1.Input.Address7", "Column1.Input.Address8", "Column1.Input.Country", "Column1.Input.SuperAdministrativeArea", "Column1.Input.Administrative Area", "Column1.Input.SubAdministrativeArea", "Column1.Input.Locality", "Column1.Input.DependentLocality", "Column1.Input.DoubleDependentLocality", "Column1.Input.Thoroughfare", "Column1.Input.DependentThoroughfare", "Column1.Input.Building", "Column1.Input.Premise", "Column1.Input.SubBuilding", "Column1.Input.PostalCode", "Column1.Input.Organization", "Column1.Input.PostBox"}),
        #"Added ID" = Table.AddColumn(#"Expanded Column1.Input", "ID", each [Column1.Input.Address1]&[Column1.Input.Address2]&[Column1.Input.PostalCode]),
        #"Removed Columns1" = Table.RemoveColumns(#"Added ID",{"Column1.Input.Address", "Column1.Input.Address1", "Column1.Input.Address2", "Column1.Input.Address3", "Column1.Input.Address4", "Column1.Input.Address5", "Column1.Input.Address6", "Column1.Input.Address7", "Column1.Input.Address8", "Column1.Input.Country", "Column1.Input.SuperAdministrativeArea", "Column1.Input.Administrative Area", "Column1.Input.SubAdministrativeArea", "Column1.Input.Locality", "Column1.Input.DependentLocality", "Column1.Input.DoubleDependentLocality", "Column1.Input.Thoroughfare", "Column1.Input.DependentThoroughfare", "Column1.Input.Building", "Column1.Input.Premise", "Column1.Input.SubBuilding", "Column1.Input.PostalCode", "Column1.Input.Organization", "Column1.Input.PostBox"}),
        #"Reordered Columns1" = Table.ReorderColumns(#"Removed Columns1",{"ID", "AQI", "AVC", "DeliveryAddress1", "DeliveryAddress2", "DeliveryAddress3", "Locality", "PostalCode", "CountryName", "Address", "Address1", "Address2", "Address3", "Administrative Area", "AdministrativeArea", "DeliveryAddress", "HyphenClass", "ISO3166-2", "Country", "ISO3166-3", "ISO3166-N", "MatchRuleLabel", "PostalCodePrimary", "Premise", "PremiseNumber", "Thoroughfare", "ThoroughfareName", "ThoroughfareTrailingType", "ThoroughfareType", "Address4", "DependentLocality", "Unmatched", "Building", "SubBuilding", "SubBuildingNumber", "Address5"}),
        #"Removed Other Columns" = Table.SelectColumns(#"Reordered Columns1",{"ID", "AQI", "AVC", "DeliveryAddress1", "DeliveryAddress2", "DeliveryAddress3", "Locality", "PostalCode", "CountryName"})
    in
        #"Removed Other Columns"
, documentation = [
Documentation.Name =  " fxCleanAddressesLoqate
" , Documentation.LongDescription = " Performs address cleaning by calling Loqate API. There is a limit of up to 1,000 addresses per API call. Cost 1.2p per address cleaned. The function receives a table as an arguement with format:
[Key: API key, Geocode: False by default, LoqatePrepare: Table]
LoqatePrepare must have the following headers:
[Address	Address1	Address2	Address3	Address4	Address5	Address6	Address7	Address8	Country	SuperAdministrativeArea	AdministrativeArea	SubAdministrativeArea	Locality	DependentLocality	DoubleDependentLocality	Thoroughfare	DependentThoroughfare	Building	Premise	SubBuilding	PostalCode	Organization	PostBox]
Source code: https://raw.githubusercontent.com/RefugeDatabase/PowerQuery/main/Scripts/fxCleanAddressesLoqate.pq
", Documentation.Source = " https://raw.githubusercontent.com/RefugeDatabase/PowerQuery/main/Scripts/fxCleanAddressesLoqate.pq
"] 
 in 
    Value.ReplaceType(func, Value.ReplaceMetadata(Value.Type(func), documentation))
